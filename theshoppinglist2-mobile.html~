<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=320">
<link rel="stylesheet" type="text/css" href="ostoslista2-mobile.css">
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
<script>

function getCookie(cname) {
  var name = cname + "=";
  var ca = document.cookie.split(';');
  for(var i=0; i<ca.length; i++) {
    var c = ca[i].trim();
    if (c.indexOf(name) == 0) return c.substring(name.length, c.length);
  }
  return "";
}

function setCookie(cname,cvalue,exdays) {
  var d = new Date();
  d.setTime(d.getTime() + (exdays*24*60*60*1000));
  var expires = "expires=" + d.toGMTString();
  document.cookie = cname+"="+cvalue+"; "+expires+"; domain=nykanen.github.io; path=/";
}


/*
A string listing the types of entries with single characters.
An item items[n] has the type type[n].
*/
var type;

/*Converts the type to a letter*/
function convertType(t) {
  var typelist = {bakery:"b",dairy:"d",dry:"D",drinks:"r",fish:"f",greens:"g",hyg:"h",meat:"m"};
  return typelist[t];
}

/*Converts a type character into a number*/
function getType(index) {
  var n = type.charCodeAt(index);
  return n;
}

/*Translates a type number into a word*/
function getClass(n) {
  switch (n) {
    case "b".charCodeAt(0): //Bakery
      return "bakery";
      break;
    case "d".charCodeAt(0): //Dairy
      return "dairy";
      break;
    case "D".charCodeAt(0): //Dry
      return "dry";
      break;
    case "r".charCodeAt(0): //Drinks
      return "drinks";
      break;
    case "f".charCodeAt(0): //Fish
      return "fish";
      break;
    case "g".charCodeAt(0): //Greens
      return "greens";
      break;
    case "h".charCodeAt(0): //Hygiene
      return "hyg";
      break;
    case "m".charCodeAt(0): //Meat
      return "meat";
      break;
  }  
}


/*Array of objects representing the items*/
var entries;

//Default entries
entries = [
{item:'Milk',type:'dairy',unit:'l',amount:1,active:false},
{item:'Cheese',type:'dairy',unit:'pkg',amount:1,active:false},
{item:'Bread',type:'bakery',unit:'pkg',amount:1,active:false},
{item:'Toast',type:'bakery',unit:'pkg',amount:1,active:false},
{item:'Minced meat',type:'meat',unit:'g',amount:500,active:false},
{item:'Cream',type:'dairy',unit:'dl',amount:2,active:false},
{item:'Fresh cheese',type:'dairy',unit:'pkg',amount:1,active:false},
{item:'Cola',type:'drinks',unit:'l',amount:1.5,active:false},
{item:'Orange juice',type:'drinks',unit:'l',amount:1,active:false},
{item:'Apple juice',type:'drinks',unit:'l',amount:1,active:false},
{item:'Sparkling water',type:'drinks',unit:'l',amount:1,active:false},
{item:'Still water',type:'drinks',unit:'l',amount:1,active:false},
{item:'Beer',type:'drinks',unit:'l',amount:0.5,active:false},
{item:'Sausage',type:'meat',unit:'-',amount:1,active:false},
{item:'Chicken filet',type:'meat',unit:'g',amount:500,active:false},
{item:'Pork chops',type:'meat',unit:'g',amount:500,active:false},
{item:'Salmon',type:'fish',unit:'kg',amount:1,active:false},
{item:'Shrimps',type:'fish',unit:'g',amount:250,active:false},
{item:'Trout',type:'fish',unit:'kg',amount:1,active:false},
{item:'Herring',type:'fish',unit:'g',amount:500,active:false},
{item:'Tuna',type:'fish',unit:'g',amount:500,active:false},
{item:'Sushi',type:'fish',unit:'-',amount:1,active:false},
{item:'Potatoes',type:'greens',unit:'kg',amount:1,active:false},
{item:'Apples',type:'greens',unit:'kg',amount:0.5,active:false},
{item:'Cucumber',type:'greens',unit:'kg',amount:0.5,active:false},
{item:'Tomatoes',type:'greens',unit:'kg',amount:0.5,active:false},
{item:'Oranges',type:'greens',unit:'kg',amount:0.5,active:false},
{item:'Spam',type:'meat',unit:'g',amount:500,active:false},
{item:'Toothpaste',type:'hyg',unit:'pkg',amount:1,active:false},
{item:'Soap',type:'hyg',unit:'-',amount:1,active:false},
{item:'Shampoo',type:'hyg',unit:'-',amount:1,active:false},
{item:'Shower gel',type:'hyg',unit:'-',amount:1,active:false},
{item:'Toilet paper',type:'hyg',unit:'-',amount:1,active:false},
{item:'Toothbrush',type:'hyg',unit:'-',amount:1,active:false},
{item:'Penne',type:'dry',unit:'g',amount:500,active:false},
{item:'Rice',type:'dry',unit:'kg',amount:1,active:false},
{item:'Wheat flour',type:'dry',unit:'kg',amount:1,active:false}
]

/*
List of all items (active and inactive).
Used for the indexing of the entries array.
*/
var items = [];

/*
Get the index of an item
*/
function getIndex(item) {
  var index = items.indexOf(item);
  return index;
}


/*
Load entries from the cookies
and update the entries array.
*/
function loadList() {
  var itemsRaw = getCookie("items");
  if (itemsRaw != "") {
    items = itemsRaw.split(":");
    var amountsRaw = getCookie("amounts");
    var amounts = amountsRaw.split(":");
    var unitsRaw = getCookie("units");
    var units = unitsRaw.split(":");
    type = getCookie("type");
    var x;
    for (x in items) { // x is the index
      var a = amounts[x];
      var u = units[x];
      var i = items[x];
      var y = entriesIndex(i);
      if (y != -1) {
        entries[y].amount = a;
        entries[y].unit = u;
        entries[y].active = true;
      } else {
        var entry = {};
        var t = getType(x);
        var c = getClass(t);
        entry.item = i;
        entry.type = c;
        entry.unit = u;
        entry.amount = a;
        entry.active = true;
        entries.push(entry);
      }
    }
  }
  entries.sort(compare);
  items = [];
  for (x in entries) {
    items[x] = entries[x].item;
  }
}

//Required for loading a shopping list from cookies
function entriesIndex(item) {
  for (i = 0; i < entries.length; i++) {
    if (entries[i].item == item) {
      return i;
      break;
    }
  }
  return -1;
}

/*
Sorting function for object array
http://stackoverflow.com/questions/1129216/sorting-objects-in-an-array-by-a-field-value-in-javascript
*/
function compare(a,b) {
  var A = a.item.toUpperCase();
  var B = b.item.toUpperCase();
  if (A < B)
     return -1;
  if (A > B)
    return 1;
  return 0;
}



var editItem = "";
var editType = "";

function itemClick() {
  if (this.innerHTML == "+") {//Custom item
    editType = this.id.slice(0,-6);
    editItem = "";
    editEntry();
  } else {//Existing item
    var itemId = this.id;
    var item = itemId.slice(0,-2);
    editItem = item;
    var index = getIndex(item);
    editType = entries[index].type;
    if (entries[index].active) {//Active item (AI)
      if (state=="view") {//AI in view mode
        check(this,item);
      } else {//AI in edit mode
        editEntry();
      }
    } else {//Inactive item (edit mode)
      addDefault();
    }
  }
}

//Check or uncheck item in the view mode
function check(e,item) {
  var index = getIndex(item);
  var cn = e.className;
  if (cn != "checked") {
    e.className = "checked";
  } else {
    e.className = entries[index].type;
  }
}


function showMain(b) {
  if (b) {
    $("#mainView").show();
    $("#sideView").hide();
  } else {
    $("#mainView").hide();
    $("#sideView").show();
  }
}

function showForm(b) {
  if (b) {
    $("#theForm").show();
    $("#addentry").show();
    $("#removeentry").show();
  } else {
    $("#theForm").hide();
    $("#addentry").hide();
    $("#removeentry").hide();
  }
}

function showPrompt(b) {
  if (b) {
    $("#editentry").show();
//    $("#removeentry").show();
  } else {
    $("#editentry").hide();
//    $("#removeentry").hide();
  }
}


function promptView(item) {
  showMain(false);
  showForm(false);
  showPrompt(true);
  $("#sidehead")
    .attr("class","menu")
    .text(getEntryText(item));
  $("#editentry")
    .attr("class","prompt")
    .text("Edit entry")
    .on("click",editEntry);
  $("#removeentry")
    .attr("class","prompt")
    .text("Remove entry")
    .on("click",removeEntry);
  $("#cancel")
    .attr("class","prompt")
    .text("Cancel")
    .on("click",editView);
}

function removeEntry() {
  var item = editItem;
  var index = getIndex(item);
  entries[index].amount = 1; //TODO: Change to take it from the defaultList
  entries[index].unit = "-"; //TODO: Change to take it from the defaultList
  entries[index].active = false;
  var type = entries[index].type;
  var nActiveEntries = 0;
  for (x in entries) {
    if (entries[x].type == type) {
      if (entries[x].active) {
        nActiveEntries += 1;
      }
    }
  }
  if (nActiveEntries == 0) {
    $("#"+type+"Head").attr("class","edit");
  }
  var entryID = item + "ID";
  $("[id=\""+entryID+"\"]")
    .text(item)
    .attr("class","edit");
  writeCookie();
  editView();
}

function editView() {
  showMain(true);
  $("#notification").hide();
  $(".edit").show();
  $("#title").text("Edit List");
  $("#navi").text("View");
}

//Construct the text for an entry
function getEntryText(item) {
  var index = getIndex(item);
  var a = entries[index].amount;
  var u = entries[index].unit;
  var i = item;
  var txt;
  if (u == "-") {
    if (a == 1) {
      txt = i; // a=1 u=- => txt = item
    } else {
      txt = a + " " + i; // a!=1 u=- => txt= a item
    }
  } else {
    txt = a + u + " " + item; // u!=- => txt = au item
  }
  return txt;
}

function editEntry() {
  showMain(false);
  showForm(true);
  showPrompt(false);
  var item = editItem;
  var index = getIndex(item);
  var a, u, t;
  if (index == -1) {
    a = 1;
    u = "-";
    t = editType;
  } else {
    a = entries[index].amount;
    u = entries[index].unit;
    t = entries[index].type;
  }
  $("#sidehead").text("Edit Entry");
  $("#inputItem").prop("value",item);
  $("#inputAmount").prop("value",a);
  $("#inputUnit").prop("value",u);
  if (u == "-") {
    $("#inputUnit").prop("value","");
    $("#inputUnit").prop("placeholder","l, kg, ...");
  }
  $("#addentry")
    .attr("class","button")
    .text("Add entry")
    .on("click",addEntry);
  $("#removeentry")
    .attr("class","button")
    .text("Remove entry")
    .on("click",removeEntry);
  $("#cancel")
    .attr("class","button")
    .text("Cancel")
    .on("click",editView);
}

function addEntry() {
  //Read input fields
  var item = $("#inputItem").val().trim();
  if (item == "") {
    editView();
  } else {
    var amount = $("#inputAmount").val();
    var unit = $("#inputUnit").val();
    if (unit == "") {
      unit = "-";
    }
    var type = editType;
    //Make the heading visible
    $("#"+type+"Head").attr("class","view");
    var index = getIndex(item);
    if (index == -1) { //add a new item
      var entry = {};
      entry.item = item;
      entry.amount = amount;
      entry.unit = unit;
      entry.type = type;
      entry.active = true;
      entries.push(entry);
      entries.sort(compare); //sort the entries anew
      items = [];
      for (x in entries) {
        items[x] = entries[x].item;
      }
      addNewItem(item);
    } else { //edit an old item
      entries[index].amount = amount;
      entries[index].unit = unit;
//      entries[index].active = true;  //This is set already at first click
      itemId = item + "ID";
      $("[id=\""+itemId+"\"]")
        .text(getEntryText(item));
//        .attr("class",entries[index].type); // This is set already at first click
    }
    writeCookie();  
    editView();
  }
}

function addDefault() {
  var item = editItem;
  var type = editType;
  var index = getIndex(item);
  //Make the heading visible
  $("#"+type+"Head").attr("class","view");
  entries[index].active = true;
  itemId = item + "ID";
  $("[id=\""+itemId+"\"]").attr("class",entries[index].type);
  var entriesOfAType = []; //indices of items of a type type
  for (x in entries) {
    if (entries[x].type == type) {
      entriesOfAType.push(x);
    }
  }
  for (x in entriesOfAType) { //write down what is the last active item of a type type
    if (entries[entriesOfAType[x]].active == true) {
      lastItems[type]=entries[entriesOfAType[x]].item;
    }
  }
  writeCookie();
}

//Insert a non-default entry to its rightful place in edit and view mode
function addNewItem(item) {
  var index = getIndex(item);
  var type = entries[index].type;
  var entriesOfAType = []; //indices of items of a type type
  var itemsOfAType = []; //list_of_items of a type type
  for (x in entries) {
    if (entries[x].type == type) {
      entriesOfAType.push(x);
      itemsOfAType.push(entries[x].item);
    }
  }
  for (x in itemsOfAType) {
    if (itemsOfAType[x].active == true) {
      lastItems[type] = itemsOfAType[x];
    }
  }
  var typeIndex = itemsOfAType.indexOf(item); //index of the item in the list_of_items
  var div, p;
  div = $("#"+type);
  p = $("<p></p>")
        .text(getEntryText(item))
        .attr("class",type)
        .attr("id",item + "ID");
  var lastIndex = itemsOfAType.length - 1;
  if (itemsOfAType.length == 1 || typeIndex == lastIndex) {
     $("#"+type+"Custom").before(p);
  } else {
    var next = itemsOfAType[typeIndex + 1];
    var nextId = next + "ID";
    $("#"+nextId).before(p);
  }
}

//Save the active entries to cookies
function writeCookie() {
  var itemsEntry = "";
  var amountsEntry = "";
  var unitsEntry = "";
  var typesEntry = "";
  var first = true;
  for (x in entries) {
    if (entries[x].active == true) {
      var typeCode = convertType(entries[x].type);
      typesEntry = typesEntry + typeCode;
      if (first) {
        itemsEntry = entries[x].item;
        amountsEntry = entries[x].amount;
        unitsEntry = entries[x].unit;
        first = false;
      } else {
        itemsEntry = itemsEntry + ":" + entries[x].item;
        amountsEntry = amountsEntry + ":" + entries[x].amount;
        unitsEntry = unitsEntry + ":" + entries[x].unit;
      }
    }
  }
  setCookie("items",itemsEntry,100);
  setCookie("amounts",amountsEntry,100);
  setCookie("units",unitsEntry,100);
  setCookie("type",typesEntry,100);
}

//Needed for setting the margins between items and headings in view mode
var lastItems = {};

/*
Create the looks for an entry
and display it
*/
function makeEntry(entry) {
  var i = entry.item;
  var t = entry.type;
  var p = $("<p></p>");
//  var div = $("#"+t);
  var custom = $("#"+t+"Custom");
  var entryId = i + "ID";
  if (entry.active) {
    var headID = t + "Head";
    $("#"+headID).attr("class","view"); //Set the class of the head
    var txt = getEntryText(i);
    p.text(txt)
     .attr("class",t)
     .attr("id",entryId)
//    div.append(p);
    custom.before(p);
  } else {
    p.text(i)
     .attr("class","edit")
     .attr("id",entryId)
//     div.append(p);
    custom.before(p);
  }
}

//Remove 
function clearList() {
  if (confirm("Remove all entries?") == true) {
    for (x in items) {
      entries[x].active = false;
      $("[id=\""+items[x]+"ID\"]") //TODO: fix also the amount and unit
        .prop("class","edit")
        .text(items[x]);
      var type = entries[x].type;
      $("#"+type+"Head").attr("class","edit");
    }
    writeCookie();
    state = "edit";
    editView();
  }
}

//Show in the beginning if there are no entries
function showNotification() {
  $("#notification")
    .text("You have no shopping list. Create a new list!")
    .css("color","white")
    .on("click",switchMode);
}


//Switch between view and edit mode
function switchMode() {
  if (state=="view") {
    editView();
    state = "edit";
    for (x in lastItems) {
      $("[id=\""+items[x]+"ID\"]").css("bottom-margin: 0.1em;");
    }
  } else {
    $(".edit").hide();
    $("#title").text("The Shopping List");
    $("#navi").text("Edit");
    state = "view";
    for (x in lastItems) {
      $("[id=\""+lastItems[x]+"ID\"]").css("margin-bottom","1em");
    }
  }
}

var state;

function makePage() {
  showMain(true);
  loadList();
  state = "view";
  for (i in entries) {
    makeEntry(entries[i]);
  }
  $(".edit").hide();
  var nActive = 0;
  for (x in entries) {
    if (entries[x].active) {
      nActive += 1;
    }
  }
  if (nActive == 0) {  
    showNotification();
  }
  $(".main > div").on("click","p",itemClick);
}

</script>
</head>
<body onload="makePage()">

<div id ="mainView" class="main">
<div class="menu">
<h1 class="menu" id="title">The Shopping List</h1>
<p class="menu"><span id="navi" onclick="switchMode()">Edit</span>
<span onclick="clearList()">Clear</span><br></p><br>
<div class="bar"></div>
</div>
<div>
<h1 class="dummy" style="color:black;">The Shopping List</h1>
<p class="dummy" style="color:black;border-color:black;"><span>Edit</span>
<span>Clear</span><br></p>
</div>

<p id="notification"></p>

<h1 class="edit" id="bakeryHead">Bakery products</h1>
<div id="bakery">
<p class="edit" id="bakeryCustom">+</p>
</div>

<h1 class="edit" id="dairyHead">Dairy products</h1>
<div id="dairy">
<p class="edit" id="dairyCustom">+</p>
</div>


<h1 class="edit" id="drinksHead">Drinks</h1>
<div id="drinks">
<p class="edit" id="drinksCustom">+</p>
</div>


<h1 class="edit" id="dryHead">Dry goods</h1>
<div id="dry">
<p class="edit" id="dryCustom">+</p>
</div>

<h1 class="edit" id="fishHead">Fish</h1>
<div id="fish">
<p class="edit" id="fishCustom">+</p>
</div>

<h1 class="edit" id="greensHead">Fruits and vegetables</h1>
<div id="greens">
<p class="edit" id="greensCustom">+</p>
</div>

<h1 class="edit" id="hygHead">Hygiene products</h1>
<div id="hyg">
<p class="edit" id="hygCustom">+</p>
</div>

<h1 class="edit" id="meatHead">Meat products</h1>
<div id="meat">
<p class="edit" id="meatCustom">+</p>
</div>

</div>
<div id="sideView" class="side">
<h1 class="menu" id="sidehead" style="width:100%;position:fixed;left:0;top:0;"></h1>
<form id="theForm" style="color:white;">
<label>Item:</label><input class="input" id="inputItem"><br>
<label>Amount:</label><input class="input" id="inputAmount"><br>
<label>Unit:</label><input class="input" id="inputUnit"><br>
</form>
<div id="buttons">
<p id="editentry"></p>
<p id="addentry"></p>
<p id="removeentry"></p>
<p id="cancel"></p>
</div>
</div>
</body>

